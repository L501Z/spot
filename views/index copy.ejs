<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hello</title>
    <script>
const clientId="081c58f9ed6b4f2b862976214444df17";
const params = new URLSearchParams(window.location.search);
let count = false;
const code = params.get("code");
let userid = "";

async function start(){
        if (!code) {
        spotifyApiStart(clientId);
        } else {
        const accessToken = await genSpotAccessToken(clientId, code);
        const profile = await getUserData(accessToken);
        const profile2 = await getUserPlaylist(accessToken);
        populateUI(profile, profile2)
    }
}

async function spotifyApiStart(clientId, code) {
    const verifier = generateCodeVerifier(128);
    const challenge = await generateCodeChallenge(verifier);


    localStorage.setItem("verifier", verifier);

    const params = new URLSearchParams();
    params.append("client_id", clientId);
    params.append("response_type", "code");
    params.append("redirect_uri", "http://127.0.0.1:3000/log_on_spotify");
    params.append("scope", "user-read-private user-read-email");
    params.append("code_challenge_method", "S256");
    params.append("code_challenge", challenge);
    document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;
    
}

function generateCodeVerifier(length) {
    let text = '';
    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

    for (let i = 0; i < length; i++) {
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
}

async function generateCodeChallenge(codeVerifier) {
    const data = new TextEncoder().encode(codeVerifier);
    const digest = await window.crypto.subtle.digest('SHA-256', data);
    return btoa(String.fromCharCode.apply(null, [...new Uint8Array(digest)]))
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=+$/, '');
}
//gen access token for spotify

async function genSpotAccessToken(clientId, code) {
    const verifier = localStorage.getItem("verifier");

    const params = new URLSearchParams();
    params.append("client_id", clientId);
    params.append("grant_type", "authorization_code");
    params.append("code", code);
    params.append("redirect_uri", "http://127.0.0.1:3000/log_on_spotify");
    params.append("code_verifier", verifier);

    const result = await fetch("https://accounts.spotify.com/api/token", {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: params
    });

    const { access_token } = await result.json();
    return access_token;

}

//send post request for user playlist and send access token in auth

async function getUserData(token){
    const result = await fetch("https://api.spotify.com/v1/me", {
        method: "GET", headers: { Authorization: `Bearer ${token}` }
    });

    return await result.json();
}

async function getUserPlaylist(token){
    const userid = "31wcv7v6vxz6mgtur6xg2enqr3xi";
    const result = await fetch(`https://api.spotify.com/v1/users/${userid}/playlists`, {
        method: "GET", headers: { Authorization: `Bearer ${token}` }
    });
    return await result.json();
}

function populateUI(profile, profile2) {
    document.getElementById("displayName").innerText = profile.display_name;
    document.getElementById("id").innerText = profile.id;

    let count = 1;

    let title = `userPlay${count}`
    for (let i= 0; i<= 8; i++){
        document.getElementById(title).title = profile2.items[i].name;
        document.getElementById(title).src = profile2.items[i].images[0].url;
        count++;
        title = `userPlay${count}`
    }
}

    //turn response into object made up of arrrays that contain each songs - Title, Artist, Year

    //at this point give user feedback to ask if they meant to choose this playlist

    //gen access token for souncloud

    //send request to create a playlist

    //check that the playlist was made successfully 

    //loop object and search for soundcloud link to current song  
    //  -if there are no matching results, save those that didn't match in a seperate array and present this to the user
    //  -to match the song, use soundcloud's search api feature with the tile and artist (year if necessary)

    //once a match is found add each link to the new playlist created==


    </script>
</head>
<body>
    <nav class="topnav">
        <li><a class="active" href="#home">Home</a></li>
        <li><a href="#news">Tutorial</a></li>
        <li><a href="#contact">About</a></li>
        <li><img class="navImg" src="spotify.png" height="100px"></li>
    </nav>

    <style>
        html,body{
            margin: 0;
            padding: 0;
            background-color: rgb(30, 30, 30);
            font-family: Arial, Helvetica, sans-serif;
            color: rgb(255, 255, 255);
        }
        .topnav{
            width: 100%;
            height: 13vh;
            background-color: rgb(125, 124, 123);
            color: white;
            list-style-type: none;
            margin: 0;
            padding: 0;
            overflow: hidden;
            background-color: #333;
            position: -webkit-sticky; /* Safari */
            position: sticky;
            top: 0;
            z-index: 99;
        }
        a{
            color: white;
            text-decoration: none;
        }
        li {
            float: left;
            width: 10vw;
        }

        .navImg{
            padding-left: 580%;
            padding-top: 6%;
        }

        li a {
        display: block;
        color: white;
        text-align: center;
        padding: 56px 16px;
        text-decoration: none;
        }

        li a:hover {
        background-color: #111;
        }

        .active {
        background-color: #252625;
        }
    </style>
<div class="userDataContainer">
    <div class="userData">
        <button onclick="start()" id="logIn">LOG IN</button>
        </section>
    </div>
</div>

<style>
    .userData{
        background-color: rgb(22, 21, 22);
        width: 40vw;
        border-radius: 25px;
        grid-row: 2;
        grid-column: 2;
        display: grid;
        grid-template-columns: 250px 250px 250px;
        grid-template-rows: 200px 300px;
    }
    .userDataContainer{
        display: grid;
        grid-template-columns: 30% 30%;
        grid-template-rows: 200px 300px;
    }
    .displayNamePretext{
        margin-left: 30%;
        grid-column: 2/4;
    }
    #displayName{
        margin-left: 45%;
    }
    #logIn{
        margin-top: 30%;
        margin-left: 42%;
        text-decoration: none;
        padding: 10px;
        font-family: "Open Sans", sans-serif;
        font-size: 16px;
        letter-spacing: 2px;
        text-decoration: none;
        text-transform: uppercase;
        color: #000;
        cursor: pointer;
        border: 3px solid;
        padding: 0.25em 0.5em;
        box-shadow: 1px 1px 0px 0px, 2px 2px 0px 0px, 3px 3px 0px 0px, 4px 4px 0px 0px, 5px 5px 0px 0px;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        }

    #logIn:active {
    box-shadow: 0px 0px 0px 0px;
    top: 5px;
    left: 5px;
    }

    @media (min-width: 768px) {
    #logIn {
        padding: 0.25em 0.75em;
    }
}
    
</style>


</body>
</html>